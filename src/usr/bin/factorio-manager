#!/usr/bin/bash
set -e

trap "exit" INT TERM
trap "kill 0" EXIT

SERVERS=/var/lib/factorio-manager/servers
BINARIES=/var/lib/factorio-manager/binaries
TARBALLS=/var/lib/factorio-manager/tarballs
CONFIGS=/etc/factorio-manager

ensure_version() {
  local VERSION=$1
  local DIR="$BINARIES/$VERSION"
  local TARBALL="$TARBALLS/factorio_headless_x64_$VERSION.tar.xz"

  # download tarball
  if [[ ! -f "$TARBALL" ]]; then
    echo "tarball doesn't exist...grabbing"
    (cd "$TARBALLS" && curl -fsSOJL "https://factorio.com/get-download/$VERSION/headless/linux64")
  fi

  # extract tarball
  if [[ ! -d "$DIR" ]]; then
    echo "extracted dir doesn't exist...extracting"
    mkdir "$DIR"
    tar xf "$TARBALL" --strip-components 1 -C "$DIR"
    "$DIR/bin/x64/factorio" --start-server "" || true # start once to create default config
  fi
}

create_server() {
  local NAME=$1
  local VERSION=$2

  ensure_version "$VERSION"

  local DIR="$SERVERS/$NAME"
  if [[ ! -d "$DIR" ]]; then
    echo "creating server $DIR"
    mkdir "$DIR"
    mkdir "$DIR/saves"
    mkdir "$DIR/archive"
    mkfifo "$DIR/fifo"

    cp -r "$BINARIES/$VERSION/config" "$DIR/"
    sed -i "s~write-data=__PATH__executable__/\.\./\.\.~write-data=$DIR~" "$DIR/config/config.ini"
  fi
}

exec_server() {
  local NAME=$1
  local VERSION=$2
  create_server "$NAME" "$VERSION"
  "$BINARIES/$VERSION/bin/x64/factorio" -c "$SERVERS/$NAME/config/config.ini" "${@:3}"
}

get_latest_map() {
  ls -tA "$SERVERS/$1/saves" | head -1
}

init_server() {
  local NAME=$1
  local SERVER="$SERVERS/$NAME"
  local LATEST=$(get_latest_map "$NAME")
  if [[ -n "$LATEST" ]]; then
    echo "already has existing map"
    return 1
  else
    exec_server "$NAME" "$2" --create "$SERVER/saves/map.zip"
  fi
}
reset_server() {
  archive_server "${@:1}"
  init_server "${@:1}"
}
archive_server() {
  local NAME=$1
  local SERVER="$SERVERS/$NAME"
  local LATEST=$(get_latest_map "$NAME")
  if [[ -n "$LATEST" ]]; then
    mv --backup=t "$SERVER/saves/$LATEST" "$SERVER/archive/$(date -u +"%FT%H%MZ").zip"
    find "$SERVER/saves/" -mindepth 1 -delete
  fi
}
start_server() {
  local NAME=$1
  local LATEST=$(get_latest_map "$NAME")
  if [[ -z "$LATEST" ]]; then
    init_server "$1" "$2"
  fi

  trap stop USR1

  stop() {
    if [[ $PID -ne 0 ]]; then
      kill $PID
    fi
  }

  while :; do
    local NAME=$1
    local VERSION=$2
    create_server "$NAME" "$VERSION"
    local FIFO="$SERVERS/$NAME/fifo"
    "$BINARIES/$VERSION/bin/x64/factorio" -c "$SERVERS/$NAME/config/config.ini" exec_server "$1" "$2" --start-server-load-latest <>"$FIFO" &

    local PID=$!
    set +e
    wait $PID
    set -e
    while kill -0 $PID;do sleep 1;done;
    reset_server "$1" "$2"
  done
}

run() {
  local NAME=$2
  if [[ -f "$CONFIGS/servers/$NAME/config" ]]; then
    . "$CONFIGS/servers/$NAME/config"
  fi

  case "$1" in
    create)
      create_server "$NAME" "$version"
      ;;
    init)
      init_server "$NAME" "$version"
      ;;
    reset)
      reset_server "$NAME" "$version"
      ;;
    archive)
      archive_server "$NAME" "$version"
      ;;
    start)
      start_server "$NAME" "$version"
      ;;
    exec)
      exec_server "$NAME" "$version" "${@:3}"
      ;;
  esac
}

run $@

# sudo -u factorio-manager factorio-manager <command> <name>
# sudo -u factorio-manager src/usr/bin/factorio-manager start new-server
