#!/usr/bin/bash
set -e

if [[ $(whoami) != factorio-manager ]]; then
  exec sudo -u factorio-manager "$0" "$@"
fi

cleanup() {
  if [[ -n "$PID" ]]; then
    kill $PID
    wait $PID
  fi
  kill 0
}

trap "exit" INT TERM
trap "cleanup" EXIT

SERVERS=/var/lib/factorio-manager/servers
BINARIES=/var/lib/factorio-manager/binaries
TARBALLS=/var/lib/factorio-manager/tarballs
CONFIGS=/etc/factorio-manager

ensure_version() {
  local VERSION=$1
  local DIR="$BINARIES/$VERSION"
  local TARBALL="$TARBALLS/factorio_headless_x64_$VERSION.tar.xz"

  # download tarball
  if [[ ! -f "$TARBALL" ]]; then
    echo "tarball doesn't exist...grabbing"
    (cd "$TARBALLS" && curl -fsSOJL "https://factorio.com/get-download/$VERSION/headless/linux64")
  fi

  # extract tarball
  if [[ ! -d "$DIR" ]]; then
    echo "extracted dir doesn't exist...extracting"
    mkdir "$DIR"
    tar xf "$TARBALL" --strip-components 1 -C "$DIR"
  fi
}

create_server() {
  local NAME=$1
  local VERSION=$2

  ensure_version "$VERSION"

  local DIR="$SERVERS/$NAME"
  [[ ! -d "$DIR" ]] && echo "creating server $DIR"
  mkdir -p "$DIR"
  mkdir -p "$DIR/saves"
  mkdir -p "$DIR/archive"
  mkdir -p "$DIR/scenarios"
  [[ -d "$DIR/scenarios/scenario" ]] && rm -r "$DIR/scenarios/scenario"
  [[ -d "$CONFIGS/servers/$NAME/scenario" ]] && cp -ur "$CONFIGS/servers/$NAME/scenario" "$DIR/scenarios/scenario"
  [[ ! -e "$DIR/fifo" ]] && mkfifo "$DIR/fifo"
  mkdir -p "$DIR/config"
  echo "[path]
read-data=__PATH__executable__/../../data
write-data=$DIR" > "$DIR/config/config.ini"
}

exec_server() {
  local NAME=$1
  local VERSION=$2
  create_server "$NAME" "$VERSION"
  "$BINARIES/$VERSION/bin/x64/factorio" -c "$SERVERS/$NAME/config/config.ini" "${@:3}"
}

get_latest_map() {
  ls -tA "$SERVERS/$1/saves" | head -1
}

archive_server() {
  local NAME=$1
  local SERVER="$SERVERS/$NAME"
  local LATEST=$(get_latest_map "$NAME")
  if [[ -n "$LATEST" ]]; then
    mv --backup=t "$SERVER/saves/$LATEST" "$SERVER/archive/$(date -u +"%FT%H%MZ").zip"
    find "$SERVER/saves/" -mindepth 1 -delete
  fi
}
start_server() {
  local NAME=$1
  local VERSION=$2
  local SERVER="$SERVERS/$NAME"
  local CONFIG="$CONFIGS/servers/$NAME"
  local RESET=false
  create_server "$NAME" "$VERSION"

  trap stop USR1

  stop() {
    if [[ $PID -ne 0 ]]; then
      RESET=true
      kill $PID
    fi
  }

  while :; do
    local FIFO="$SERVER/fifo"
    local CMD=("$BINARIES/$VERSION/bin/x64/factorio" -c "$SERVER/config/config.ini")
    if [[ -e "$CONFIG/server-settings.json" ]]; then
      CMD+=(--server-settings "$CONFIG/server-settings.json")
    fi
    if [[ -e "$CONFIG/server-whitelist.json" ]]; then
      CMD+=(--use-server-whitelist --server-whitelist "$CONFIG/server-whitelist.json")
    fi
    if [[ -e "$CONFIG/map-settings.json" ]]; then
      CMD+=(--map-settings "$CONFIG/map-settings.json")
    fi
    if [[ -e "$CONFIG/map-gen-settings.json" ]]; then
      CMD+=(--map-gen-settings "$CONFIG/map-gen-settings.json")
    fi

    local LATEST=$(get_latest_map "$NAME")
    if [[ -z "$LATEST" ]] && [[ ! -e "$SERVER/scenarios/scenario" ]]; then
      "${CMD[@]}" --create "$SERVER/saves/map.zip"
    fi

    local LATEST=$(get_latest_map "$NAME")
    if [[ -n "$LATEST" ]]; then
      CMD+=(--start-server-load-latest)
    elif [[ -e "$SERVER/scenarios/scenario" ]]; then
      CMD+=(--start-server-load-scenario scenario)
    else
      echo "missing map and scenario"
      return 1
    fi
    if [[ -n "$bind" ]]; then
      if [[ "$bind" =~ ":" ]]; then
	CMD+=(--bind "$bind")
      else
	CMD+=(--port "$bind")
      fi
    fi
    if [[ -n "$rcon_bind" ]]; then
      if [[ "$rcon_bind" =~ ":" ]]; then
	CMD+=(--rcon-bind "$rcon_bind")
      else
	CMD+=(--rcon-port "$rcon_bind")
      fi
    fi
    if [[ -n "$rcon_password" ]]; then
      CMD+=(--rcon-password "$rcon_password")
    fi
    "${CMD[@]}" <>"$FIFO" &

    PID=$!
    set +e
    wait $PID
    set -e
    while kill -0 $PID;do sleep 1;done;
    if [[ "$RESET" = true ]]; then
      archive_server "$NAME" "$SERVER"
    else
      sleep 1
    fi
    RESET=false
  done
}

run() {
  local NAME=$2
  if [[ -f "$CONFIGS/servers/$NAME/config" ]]; then
    . "$CONFIGS/servers/$NAME/config"
  fi
  if [[ -z "$version" ]] || [[ "$version" = "stable" ]]; then
    version=$(curl -s --head https://factorio.com/get-download/stable/headless/linux64 | grep -oP '(?<=factorio_headless_x64_)\d+\.\d+\.\d+(?=\.tar\.xz)')
  fi
  if [[ "$version" = "experimental" ]]; then
    version=$(curl -s --head https://factorio.com/get-download/latest/headless/linux64 | grep -oP '(?<=factorio_headless_x64_)\d+\.\d+\.\d+(?=\.tar\.xz)')
  fi

  case "$1" in
    create)
      create_server "$NAME" "$version"
      ;;
    archive)
      archive_server "$NAME" "$version"
      ;;
    start)
      start_server "$NAME" "$version"
      ;;
    exec)
      exec_server "$NAME" "$version" "${@:3}"
      ;;
  esac
}

run $@
